
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEDSIMrightUMINUSFUNCTIONrightPOWMODCOMP DIFF DIVIDE DOUBLE DSIM EQUALS FUNCTION INTERSECTION LPAREN MINUS MOD NAME NUMBER PLUS POW RPAREN SET TIMES UNION VACIOstatement : NAME EQUALS expressionstatement : expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : expression POW expressionexpression : expression MOD expressionexpression : FUNCTION LPAREN expression RPARENexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : SETexpression : expression UNION expressionexpression : expression INTERSECTION expressionexpression : expression DSIM expressionexpression : expression DIFF expressionexpression : expression COMPexpression : VACIOexpression : NUMBER\n                  | DOUBLEexpression : NAME'
    
_lr_action_items = {'NAME':([0,4,6,11,12,13,14,15,16,17,18,19,20,21,25,],[2,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'FUNCTION':([0,4,6,11,12,13,14,15,16,17,18,19,20,21,25,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'MINUS':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[4,-21,13,4,4,-12,-18,-19,-20,4,4,4,4,4,4,4,4,4,4,4,-17,-10,-21,4,13,13,-3,-4,-5,-6,-7,-8,13,13,-15,13,13,-11,-9,]),'LPAREN':([0,4,5,6,11,12,13,14,15,16,17,18,19,20,21,25,],[6,6,25,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'SET':([0,4,6,11,12,13,14,15,16,17,18,19,20,21,25,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'VACIO':([0,4,6,11,12,13,14,15,16,17,18,19,20,21,25,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NUMBER':([0,4,6,11,12,13,14,15,16,17,18,19,20,21,25,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'DOUBLE':([0,4,6,11,12,13,14,15,16,17,18,19,20,21,25,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'$end':([1,2,3,7,8,9,10,22,23,24,27,28,29,30,31,32,33,34,35,36,37,39,40,],[0,-21,-2,-12,-18,-19,-20,-17,-10,-21,-1,-3,-4,-5,-6,-7,-8,-13,-14,-15,-16,-11,-9,]),'EQUALS':([2,],[11,]),'PLUS':([2,3,7,8,9,10,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[-21,12,-12,-18,-19,-20,-17,-10,-21,12,12,-3,-4,-5,-6,-7,-8,12,12,-15,12,12,-11,-9,]),'TIMES':([2,3,7,8,9,10,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[-21,14,-12,-18,-19,-20,-17,-10,-21,14,14,14,14,-5,-6,-7,-8,14,14,-15,14,14,-11,-9,]),'DIVIDE':([2,3,7,8,9,10,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[-21,15,-12,-18,-19,-20,-17,-10,-21,15,15,15,15,-5,-6,-7,-8,15,15,-15,15,15,-11,-9,]),'POW':([2,3,7,8,9,10,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[-21,16,-12,-18,-19,-20,-17,16,-21,16,16,16,16,16,16,16,16,16,16,16,16,16,-11,-9,]),'MOD':([2,3,7,8,9,10,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[-21,17,-12,-18,-19,-20,-17,17,-21,17,17,17,17,17,17,17,17,17,17,17,17,17,-11,-9,]),'UNION':([2,3,7,8,9,10,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[-21,18,-12,-18,-19,-20,-17,-10,-21,18,18,-3,-4,-5,-6,-7,-8,18,18,-15,18,18,-11,-9,]),'INTERSECTION':([2,3,7,8,9,10,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[-21,19,-12,-18,-19,-20,-17,-10,-21,19,19,-3,-4,-5,-6,-7,-8,19,19,-15,19,19,-11,-9,]),'DSIM':([2,3,7,8,9,10,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[-21,20,-12,-18,-19,-20,-17,-10,-21,20,20,20,20,-5,-6,-7,-8,20,20,-15,20,20,-11,-9,]),'DIFF':([2,3,7,8,9,10,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[-21,21,-12,-18,-19,-20,-17,-10,-21,21,21,-3,-4,-5,-6,-7,-8,21,21,-15,21,21,-11,-9,]),'COMP':([2,3,7,8,9,10,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,],[-21,22,-12,-18,-19,-20,-17,-10,-21,22,22,-3,-4,-5,-6,-7,-8,22,22,-15,22,22,-11,-9,]),'RPAREN':([7,8,9,10,22,23,24,26,28,29,30,31,32,33,34,35,36,37,38,39,40,],[-12,-18,-19,-20,-17,-10,-21,39,-3,-4,-5,-6,-7,-8,-13,-14,-15,-16,40,-11,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,6,11,12,13,14,15,16,17,18,19,20,21,25,],[3,23,26,27,28,29,30,31,32,33,34,35,36,37,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','calc.py',129),
  ('statement -> expression','statement',1,'p_statement_expr','calc.py',164),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calc.py',171),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calc.py',172),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calc.py',173),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calc.py',174),
  ('expression -> expression POW expression','expression',3,'p_expression_pow','calc.py',185),
  ('expression -> expression MOD expression','expression',3,'p_expression_mod','calc.py',192),
  ('expression -> FUNCTION LPAREN expression RPAREN','expression',4,'p_function','calc.py',199),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','calc.py',256),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calc.py',263),
  ('expression -> SET','expression',1,'p_expression_set','calc.py',270),
  ('expression -> expression UNION expression','expression',3,'p_expression_union','calc.py',313),
  ('expression -> expression INTERSECTION expression','expression',3,'p_expression_intersection','calc.py',324),
  ('expression -> expression DSIM expression','expression',3,'p_expression_dsim','calc.py',331),
  ('expression -> expression DIFF expression','expression',3,'p_expression_diff','calc.py',339),
  ('expression -> expression COMP','expression',2,'p_expression_comp','calc.py',346),
  ('expression -> VACIO','expression',1,'p_expression_vacio','calc.py',353),
  ('expression -> NUMBER','expression',1,'p_expression_number','calc.py',360),
  ('expression -> DOUBLE','expression',1,'p_expression_number','calc.py',361),
  ('expression -> NAME','expression',1,'p_expression_name','calc.py',368),
]
