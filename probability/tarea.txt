What are generics?

>


Advantages of Generics
	   
    - Reusability: 
    - Type Safety: 
    - Performance: 

Generics in Java

What is the generic in Java?

Generics means parameterized types. The idea is to allow type to be a parameter to methods, classes, and interfaces. Using Generics, it is possible to create classes that work with different data types.

Types of Java Generics

Generic Method: Takes a parameter and returns some value after performing a task.

Generic Class: It is implemented exactly like a non-genetic class, but it contains a type parameter section.


Example in Java (Generic Class)

public class Box<T> {
   private T t;

   public void add(T t) {
      this.t = t;
   }

   public T get() {
      return t;
   }

   public static void main(String[] args) {
      Box<Integer> integerBox = new Box<Integer>();
      Box<String> stringBox = new Box<String>();
    
      integerBox.add(new Integer(10));
      stringBox.add(new String("Hello World"));

      System.out.printf("Integer Value :%d\n\n", integerBox.get());
      System.out.printf("String Value :%s\n", stringBox.get());
   }
}

Output
Integer Value :10
String Value :Hello World

Generics in C#

Generic classes and methods combine reusability, type safety, and efficiency in a way that their non-generic counterparts cannot. Generics are most frequently used with collections and the methods that operate on them.

Example in C#

class DataStore<T>
{
    public T Data { get; set; }
}

class KeyValuePair<TKey, TValue>
{
    public TKey Key { get; set; }
    public TValue Value { get; set; }
}


KeyValuePair<int, string> kvp1 = new KeyValuePair<int, string>();
		kvp1.Key = 100;
		kvp1.Value = "Hundred";
		Console.WriteLine(kvp1.Key + ", " + kvp1.Value);

KeyValuePair<int, string> kvp1 = new KeyValuePair<int, string>();
		kvp1.Key = 100;
		kvp1.Value = "Hundred";
		Console.WriteLine(kvp1.Key + ", " + kvp1.Value);


Generics in Python

Example in Python



# Construct an empty Stack[int] instance


Summary:







